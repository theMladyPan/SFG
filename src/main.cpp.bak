#include <Arduino.h>
#include <Wire.h>
#include <TFT_eSPI.h>
#include <SPI.h>
#include "esp_adc_cal.h"
#include "arduinoFFT.h"
#include "math.h"
#include "rubint.h"
#include <BMI160Gen.h>


TFT_eSPI tft = TFT_eSPI(135, 240);

const uint16_t samples = 1024; // This value MUST ALWAYS be a power of 2
const double samplingFrequency = 1024; // Hz
const double interval = 1/samplingFrequency;
const double sampling_period_us = round(interval*1000000);

const double max_amplitude = 2;
const double warn_amplitude = 1.5;

void update_min_max(double *vReal, uint16_t samples, double *max, double *min)
{
  for (uint16_t i = 0; i < samples; i++)
  {
    if(vReal[i] > *max)
      *max = vReal[i];
    if(vReal[i] < *min)
      *min = vReal[i];
  }
}

float convertRawGyro(int gRaw) {
    float g = (gRaw * 1000.0) / 32768.0;
    return g;
}

float convertRawAccel(int aRaw) {
    float a = (aRaw * 2.0) / 32768.0;
    return a;
}


void setup() {
  Wire.begin(21, 22, (int)4e5);
  Serial.begin(115200);

  // TFT setup
  tft.init();
  tft.setTextFont(1);
  tft.setRotation(3);
  tft.fillScreen(TFT_BLACK);
  // draw image
  tft.pushImage(0, 0, 240, 135, (uint16_t *)epd_bitmap_rubint);

  BMI160.begin(BMI160GenClass::I2C_MODE, Wire, 0x68, 0);  
  ESP_LOGD("main", "Getting device ID");
  uint8_t dev_id = BMI160.getDeviceID();

  ESP_LOGI("main", "Device ID: %d", dev_id);

  // Set the accelerometer range to 250 degrees/second
  ESP_LOGD("main", "Setting accelerometer range ...");
  BMI160.setFullScaleGyroRange(BMI160_GYRO_RANGE_1000);
  ESP_LOGD("main", "Setting accelerometer range done.");
  BMI160.setFullScaleAccelRange(BMI160_ACCEL_RANGE_2G);
}

void loop() {
  /*
  gpio_num_t led_ok = GPIO_NUM_25; 
  gpio_num_t led_warn = GPIO_NUM_26;
  gpio_num_t led_err = GPIO_NUM_27;

  gpio_set_direction(led_ok, GPIO_MODE_OUTPUT);
  gpio_set_direction(led_warn, GPIO_MODE_OUTPUT);
  gpio_set_direction(led_err, GPIO_MODE_OUTPUT);
  */

  int gxRaw, gyRaw, gzRaw;         // raw gyro values
  int axRaw, ayRaw, azRaw;         // raw accelerometer values

  float gx = 0, gy = 0, gz = 0;
  float ax = 0, ay = 0, az = 0;

  tft.fillScreen(TFT_BLACK);
  tft.drawString("Calibrating ...", 0, 50, 4);
  ESP_LOGI("main", "Calibrating...");
  
  uint64_t timestamp;
  const uint16_t n_calib_samples = 200;
  std::array<double, n_calib_samples> x_calib, y_calib, z_calib;

  // get calibration data - device should be still
  ESP_LOGI("main", "Sampling calibration data...");
  for(int i=0; i<n_calib_samples; i++)
  {
    BMI160.readAccelerometer(axRaw, ayRaw, azRaw);
    ax = convertRawAccel(axRaw);
    ay = convertRawAccel(ayRaw);
    az = convertRawAccel(azRaw);
    x_calib[i] = ax;
    y_calib[i] = ay;
    z_calib[i] = az;
    delay(10);
  }

  ESP_LOGI("main", "Calibration data sampled! Sorting...");
  // sort arrays
  std::sort(x_calib.begin(), x_calib.end());
  std::sort(y_calib.begin(), y_calib.end());
  std::sort(z_calib.begin(), z_calib.end());

  ESP_LOGI("main", "Calibration data sorted! Computing mean...");
  // compute mean from the middle of 80% of the sorted data
  double x_null = 0, y_null = 0, z_null = 0;
  for(int i = n_calib_samples / 10; i < (n_calib_samples - (n_calib_samples / 10)); i++)
  {
    x_null += x_calib[i];
    y_null += y_calib[i];
    z_null += z_calib[i];
  }

  x_null /= n_calib_samples * .8;
  y_null /= n_calib_samples * .8;
  z_null /= n_calib_samples * .8;
  
  ESP_LOGI("main", "Calibration done! Xnull: %f, Ynull: %f, Znull: %f", x_null, y_null, z_null);
  ESP_LOGI("main", "Gravity: %f", sqrt(x_null*x_null + y_null*y_null + z_null*z_null));
  tft.drawString("Calibration done!", 0, 50, 4);
  delay(5e2);
  tft.fillScreen(TFT_BLACK);

  while(1) {
    /*
    These are the input and output vectors
    Input vectors receive computed results from FFT
    */
    double vReal[samples];
    double vImag[samples];
    /*SAMPLING*/
    ESP_LOGI("main", "Sampling...");
    // get timestamp in us
    double t_start = esp_timer_get_time();
    for(int i=0; i<samples; i++)
    {
      timestamp = esp_timer_get_time();  
      BMI160.readAccelerometer(axRaw, ayRaw, azRaw);
      ax = convertRawAccel(axRaw);
      ay = convertRawAccel(ayRaw);
      az = convertRawAccel(azRaw);
      
      double x_clean, y_clean, z_clean;
      x_clean = ax - x_null;
      y_clean = ay - y_null;
      z_clean = az - z_null;
      double acc = std::sqrt(x_clean*x_clean + y_clean*y_clean + z_clean*z_clean);
      vReal[i] = acc;
      vImag[i] = 0;
      while(esp_timer_get_time() - timestamp < sampling_period_us){
        // do nothing
      }
    }

    double max = -INFINITY, min = INFINITY;
    update_min_max(vReal, samples, &max, &min);
    ESP_LOGI("main", "Sampling done in %.3fs! max: %.3fm/s, min: %.3fm/s", esp_timer_get_time() - t_start, max, min);
    ESP_LOGI("main", "Computing FFT...");

    arduinoFFT FFT = arduinoFFT(vReal, vImag, samples, samplingFrequency);
    FFT.Windowing(FFT_WIN_TYP_HAMMING, FFT_FORWARD);	/* Weigh data */
    FFT.Compute(FFT_FORWARD); /* Compute FFT */
    FFT.DCRemoval(); /* DC Removal */
    FFT.ComplexToMagnitude(); /* Compute magnitudes */
    double f, v;
    FFT.MajorPeak(&f, &v); /* Compute peak frequency and its corresponding magnitude */
    ESP_LOGI("main", "Major peak frequency: %f, Magnitude: %f", f, v);
    ESP_LOGI("main", "#############################################");

    double ampl = max - min;
    if(ampl >= max_amplitude) {
      tft.setTextColor(TFT_RED, TFT_BLACK);
      //gpio_set_level(led_err, 1);
      //gpio_set_level(led_warn, 0);
      //gpio_set_level(led_ok, 0);
      break;
    }
    else if (ampl >= warn_amplitude) {
      tft.setTextColor(TFT_ORANGE, TFT_BLACK);
      //gpio_set_level(led_warn, 1);
    }
    else {
      tft.setTextColor(TFT_GREEN, TFT_BLACK);
      //gpio_set_level(led_ok, 1);
    }

    tft.drawString("Peak f : ", 0, 0, 4);
    tft.drawString(String(f, 1) + "Hz       ", 100, 0, 4);
    tft.drawString("Magn.  : ", 0, 40, 4);
    tft.drawString(String(v, 3) + "       ", 100, 40, 4);
    tft.drawString("Ampl.  : ", 0, 80, 4);
    tft.drawString(String(ampl, 3) + "m.s^2       ", 100, 80, 4);
  }
  ESP_LOGW("main", "Maximal amplitude reached! Exiting...");
}
